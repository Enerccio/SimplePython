/*
 * SimplePython - embeddable python interpret in java
 * Copyright (c) Peter Vanusanik, All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */
package me.enerccio.sp.interpret;

import java.util.Stack;

import me.enerccio.sp.compiler.Bytecode;
import me.enerccio.sp.errors.AttributeError;
import me.enerccio.sp.types.PythonObject;
import me.enerccio.sp.types.base.ClassInstanceObject;
import me.enerccio.sp.types.callables.ClassObject;
import me.enerccio.sp.types.properties.PropertyObject;
import me.enerccio.sp.types.sequences.StringObject;

public class InterpreterMathExecutorHelper {	
	$$interfaces$$
	public boolean mathOperation(PythonInterpreter interpreter, FrameObject o, Stack<PythonObject> stack, Bytecode opcode){
		
		switch (opcode){$$switches$$
		default:
			return false;
		}
		
		return true;
	}

	private void standardCall(PythonInterpreter i, FrameObject o, String m, PythonObject a, PythonObject b) {
		PythonObject method = null;
		try {
			PythonObject apo;
			StringObject field = new StringObject(m);
			PythonObject value = a;	// object to get attribute from
			apo = value.get("__getattribute__", i.getLocalContext()); 
			if (apo != null && !(value instanceof ClassObject)) {
				// There is __getattribute__ defined, call it directly
				method = i.execute(true, apo, null, field);
			} else {
				// Try to grab argument normally...
				apo = value.get(field.value, i.getLocalContext());
				if (apo != null) {
					method = apo;
				} else {			
					// ... and if that fails, use __getattr__ if available
					apo = value.get("__getattr__", i.getLocalContext()); 
					if (apo != null) {
						// There is __getattribute__ defined, call it directly
						method = i.execute(true, apo, null, field);
					} else
						throw new AttributeError("" + value.getType() + " object has no attribute '" + field + "'");
				}
			}
		} finally {
			if (method instanceof PropertyObject){
				method = ((PropertyObject)method).get();
			}
		}
		
		i.execute(false, method, null, b);
		o.accepts_return = true;
	}
	
}
