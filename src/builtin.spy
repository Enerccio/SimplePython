def __iter():
    class iter(object):
        def __init__(self, o):
            self.__data_source = o
            self.__index = 0
            
        def __iter__(self):
            return self
        
        def next(self):
            try:
                i = self.__index
                self.__index += 1
                return self.__data_source[i]
            except IndexError:
                raise StopIteration()
            
    def factory(obj):
        if hasattr(obj, "__iter__"):
            return obj.__iter__()
        else:
            return iter(obj)
    factory.__name__ = "iter"
    return factory

iter = __iter()
__iter = None

class xrange(object):
    class iter(object):
        def __init__(self, range):
            self.__range = range
            self.__start = range.start
            
        def __iter__(self):
            return self
        
        def next(self):
            if self.__start >= self.__range.stop:
                raise StopIteration()
            value = self.__start;
            self.__start += self.__range.step
            return value
    
    def __init__(self, arg1, arg2=None, arg3=1):
        if arg2 is None:
            self.stop = int(arg1)
            self.start = 0
            self.step = 1
        else:
            self.start = int(arg1)
            self.stop = int(arg2)
            self.step = int(arg3)
    
    def __iter__(self):
        return iter(self)
    
def range(arg1, arg2=None, arg3=1):
    r = xrange(arg1, arg2, arg3)
    l = []
    for v in r:
        l.append(v)
    return l

class super(object):
    def __init__(self, cls, inst=None):
        self.__cls = cls
        self.__inst = inst
        self.__mro = mro(cls)[1:]
        
    def __getattr__(self, key):
        arg = __find_applicable(key);
        if self.__inst is not None:
            return method(arg, self.__inst)
        else:
            return arg
        
    def __inst(self, key):
        for cls in self.__mro:
            if (hasattr(cls, key)):
                return getattr(cls, key)
        raise AttributeError("unknown attribute " + key)